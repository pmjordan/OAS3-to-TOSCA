tosca_definitions_version: tosca_simple_yaml_1_3
description: Contains an interface definition derived from an OpenAPI OAS3 document and attached to a relationship

artifact_types:
  oas3.json:
    description: "Major version 3 of OpenAPI Specification as specified by https://www.openapis.org/ expressed in JSON"
    derived_from: tosca.artifacts.Root
    mime_type: application/json
    file_ext: [json]

  oas3.yaml:
    description: "Major version 3 of OpenAPI Specification as specified by https://www.openapis.org/ expressed in YAML"
    derived_from: tosca.artifacts.Root
    file_ext: [yaml,yml]

  tmforum.oda.definition:
      description: A Kubernetes operator file with content which conforms with the emerging standard for defining TMForum ODA components at https://github.com/tmforum-rand/oda-component-definitions
      derived_from: tosca.artifacts.Root
      file_ext: [yaml]

data_types:
  rest_api_server_entry:
    description: "A compound datatype to hold an entry in the servers list defined in an OpenAPI spec"
    properties:
      url:
        type: rest_api_url
      description: 
        type: string
        required: false
      variables:
        type: rest_api_server_variables
        required: false

  rest_api_url:
    derived_from: string
    description: "A string to hold a URL used in RESTAPI specifications. Use a regular expression to limit strings to valid URLs"
    constraints:
      - pattern: ^[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)
        
  rest_api_server_variables:
    description: "A compound datatype to hold the server variable object of OpenAPI spec"
    properties:
      enum:
        type: list
        entry_schema: 
          type: string
      default:
        type: string
      description:
        type: string

  open_api_response_code_type:
    description: The HTTP Status Code used to indicate the status of the executed operation. The available status codes are defined by RFC7231 and registered status codes are listed in the IANA Status Code Registry.
    derived_from: integer
    constraints:
      - min_length: 3
      - max_length: 3

  Category:
    derived_from: json
    constraints:
      - schema: {"schemas/Category.json"}

  Tag:
    derived_from: json
    constraints:
      - schema: {"schemas/Tag.json"}

  Pet:
    derived_from: json
    constraints:
      - schema: {"schemas/Pet.json"}

  status_item:
    derived_from: string
    constraints:
      - valid_values:
        - available
        - pending
        - sold

interface_types:
  pet_store:
    metadata:
      open_api_info: "  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.6-SNAPSHOT
  title: Swagger Petstore - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'"

    description: A textual description added to TOSCA and not automatically mapped from the OpenAPI spec 
    inputs: 
      open_api_servers:
        # I would like to just refer to a data type definition rather than define the list here in the interface type definition but waiting on a fix to puccini issue #40
        description: A list of servers which implement this interface. Structure matches that in OAS3. Allows URL to be given a value at runtime using get_attribute on the instantiate node which provides the RestAPI server function for this interface
        type: list
        entry_schema: rest_api_server_entry
    operations:
      addPet:
        description: Add a new pet to the store
        inputs:
          requestBody.content.application.json:
            type: Pet
            description: Create a new pet in the store
            required: true
        # following lines parsed as inputs not outputs pending fix of puccini issue #43 and support for v2
        # outputs:
          open_api_responses_value:
            type: open_api_response_code_type
          open_api_responses_description:
            type: string
            description: "A short description of the response"
          open_api_responses.200.content.application.json:
            type: Pet

      updatePet:
        description: Update an existing pet by Id
        inputs:
          requestBody.content.application.json:
            type: Pet
            description: Update an existent pet in the store
            required: true

      findPetsByStatus:
        description: "Finds Pets by status Multiple status values can be provided with comma separated strings"
        inputs:
          status:
            description: Status values that need to be considered for filter
            required: false
            type: list
            entry_schema: status_item
              # The source document includes a keyword explode which has the effect of allowing any combination of items in the valid_values list
              # There is no TOSCA data type equivalent so we can't use the unadorned valid_values constraint below
              # constraints:
              # - valid_values:
              #     - available
              #     - pending
              #     - sold
              # instead, when explode = true in the source document we need to make the type as list not string and allow a list of status items which are defined in the data types
            default: 
            # And now we are using a list the default has to be a list not a string
             - available
            metadata: # can use metadata to record any example declared in the OAS3 parameter definition
              example: pending 

      loginUser:
        inputs:
          username:
            type: string
            default: root
            status: supported # could be deprecated if that keyword is in the OAS3 parameter definition
            metadata: # can use metadata string to record any set of examples declared in the OAS3 parameter definition 
              examples:
                "first: adam
                second: eve"

  other_examples:
    operations:
      example.post:
        inputs:
          requestBody:
            type: json
            constraints:
              - schema:
                  type: array
                  items:
                    type: integer
                    format: int64


    notifications:
      streams.post:
        outputs:
          onData.requestBody.content.application.json: [ SELF, events ]
            # type: json
            # constraints:
            #     - schema: {
            #               "$schema":"http://json-schema.org/draft-04/schema#",
            #                 "id":"",
            #                 "title":"",
            #                 "properties": {
            #                   timestamp: {
            #                     type: timestamp },
            #                   userData: {
            #                     type: string }
            #                   }
            #               }

relationship_types:
  management_relationship_type_for_my_node_type:
    description: An relationship to which the pet_store interface_type is attached. Would be auto-generated from API spec
    attributes:
    #Each content schema mentioned in the responses section of the API spec should have a prebuilt attribute ready for potential use
      open_api_response_code:
        type: open_api_response_code_type
      open_api_response_description:
        type: string
      pet:
        type: Pet
    interfaces:
      management:
        type: pet_store
        operations:
          addPet:
            # While outputs is commented out we need to have something to say here so until issue #43 and puccini v2 is fixed just overwrite the description
            description: "Add a new pet to the store Add a new pet to the store"
            # Commented out next lines pending resolution of puccini issue #43 and support for v2
            outputs:
              #Node type template author to uncomment the lines below which are appropriate to that node type and add a mapping to an attribute
              open_api_responses_value: [ SELF, open_api_response_code ]
              open_api_responses_description: [ SELF, open_api_response_description ]
              open_api_responses.200.content.application.json: [ SELF, pet ]
          updatePet:
            description: "Update an existing pet Update an existing pet by Id"
            # Commented out next lines pending resolution of puccini issue #43 and support for v2
            # outputs:
            #   Node type template author to uncomment the lines below which are appropriate to that node type and add a mapping to an attribute
            #   open_api_responses_value: [ SELF, open_api_response_code ]
            #   open_api_responses_description: [ SELF, open_api_response_description ]
            #   open_api_responses_200_content.application.json: [ SELF, pet ]
          #get cannot be mapped to TOSCA as the source document does not supply a unique id
          findPetsByStatus:
            description: "Finds Pets by status Multiple status values can be provided with comma separated strings"
            # Commented out next lines pending resolution of puccini issue #43 and support for v2
            # outputs:
            #   Node type template author to uncomment the lines below which are appropriate to that node type and add a mapping to an attribute
            #   open_api_responses_value: [ SELF, open_api_response_code ]
            #   open_api_responses_200_content.application.json: [ SELF, pet ]
node_types:
  my_node_type:

    artifacts:
      oda_definition:
        description: ODA component definition file for my_node_type
        type: tmforum.oda.definition
        file: my_node_type_oda_file.yaml

  orchestrator_type:
    description: A simple node to represent the orchestrator_type

topology_template:
  description: A template to show instantiation of a RESTapi interface 
  
  node_templates:
    my_node:
      type: my_node_type
      artifacts:
        management_interface:
          type: oas3.yaml
          file: openapi.yml

    my_orchestrator:
      type: orchestrator_type

  relationship_templates:
    my_node_management:
      type: management_relationship_type_for_my_node_type
      description: The relationship between the orchestrator and the component node used to manage the component
      interfaces:
        management:
          inputs:
            open_api_servers:
              # The value below would most likely be obtained using a get_attribute on the target component
              - url: https://10.10.10.10
